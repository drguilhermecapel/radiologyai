#!/usr/bin/env python3
"""
MedAI Radiologia - Sistema de An√°lise de Imagens M√©dicas por IA
Arquivo principal para execu√ß√£o da aplica√ß√£o
"""

import sys
import os
import logging
from pathlib import Path
from PyQt5.QtWidgets import QApplication, QMessageBox
from PyQt5.QtCore import Qt

sys.path.insert(0, str(Path(__file__).parent))

try:
    from medai_main_structure import Config, logger
    from medai_gui_main import MedAIMainWindow
    from medai_setup_initialize import SystemInitializer
except ImportError as e:
    print(f"Erro ao importar m√≥dulos: {e}")
    sys.exit(1)

def setup_application():
    """Configura a aplica√ß√£o Qt"""
    app = QApplication(sys.argv)
    app.setApplicationName(Config.APP_NAME)
    app.setApplicationVersion(Config.APP_VERSION)
    app.setOrganizationName("MedAI")
    app.setOrganizationDomain("medai.com")
    
    app.setStyle('Fusion')
    
    try:
        from PyQt5.QtGui import QIcon
        icon_path = Path(__file__).parent / "icons" / "medai_icon.png"
        if icon_path.exists():
            app.setWindowIcon(QIcon(str(icon_path)))
    except Exception:
        pass
    
    return app

def check_system_requirements():
    """Verifica requisitos do sistema"""
    missing = []
    try:
        import numpy  # noqa: F401
    except ImportError:
        missing.append('numpy')

    try:
        import pydicom  # noqa: F401
    except ImportError:
        missing.append('pydicom')

    try:
        import cv2  # noqa: F401
    except ImportError:
        missing.append('opencv-python')

    try:
        import PIL  # noqa: F401
    except ImportError:
        missing.append('Pillow')

    try:
        import tensorflow as tf  # noqa: F401
        if tf.config.list_physical_devices('GPU'):
            logger.info("GPU detectada e dispon√≠vel para TensorFlow")
    except ImportError:
        logger.warning("TensorFlow n√£o dispon√≠vel - funcionalidades de IA limitadas")

    if missing:
        logger.error(f"M√≥dulos ausentes: {', '.join(missing)}")
        return False

    logger.info("Todos os m√≥dulos essenciais dispon√≠veis")
    return True

def main():
    """Fun√ß√£o principal"""
    try:
        logger.info(f"Iniciando {Config.APP_NAME} v{Config.APP_VERSION}")
        
        if not check_system_requirements():
            print("Erro: Requisitos do sistema n√£o atendidos")
            return 1
        
        initializer = SystemInitializer()
        if not initializer.initialize_system():
            logger.error("Falha na inicializa√ß√£o do sistema")
            return 1
        
        if os.environ.get('DISPLAY') is None:
            logger.info("Ambiente headless detectado - executando em modo servidor")
            print("‚úÖ MedAI Radiologia inicializado com sucesso em modo servidor")
            print("üîß Sistema configurado e pronto para an√°lise de imagens m√©dicas")
            print("ü§ñ Modelos de IA carregados e funcionais")
            return 0
        
        app = setup_application()
        
        main_window = MedAIMainWindow()
        main_window.show()
        
        logger.info("Interface gr√°fica inicializada com sucesso")
        
        return app.exec_()
        
    except Exception as e:
        logger.error(f"Erro cr√≠tico na aplica√ß√£o: {e}")
        
        if os.environ.get('DISPLAY') is None:
            print(f"Erro cr√≠tico: {e}")
            return 1
        
        try:
            app = QApplication.instance()
            if app is None:
                app = QApplication(sys.argv)
            
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowTitle("Erro Cr√≠tico")
            msg.setText(f"Ocorreu um erro cr√≠tico:\n\n{str(e)}")
            msg.setDetailedText(f"Detalhes t√©cnicos:\n{str(e)}")
            msg.exec_()
            
        except Exception:
            print(f"Erro cr√≠tico: {e}")
        
        return 1

if __name__ == "__main__":
    sys.exit(main())
