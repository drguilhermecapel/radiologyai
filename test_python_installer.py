#!/usr/bin/env python3
"""
Teste do Instalador Python Aut√¥nomo
Verifica se o instalador funciona corretamente sem depend√™ncias externas
"""

import os
import sys
from pathlib import Path

def test_python_installer():
    """Testa o instalador Python aut√¥nomo"""
    print("üè• MEDAI RADIOLOGIA - TESTE DO INSTALADOR PYTHON AUT√îNOMO")
    print("=" * 70)
    print("Verificando instalador que N√ÉO depende de NSIS ou programas externos")
    print("=" * 70)
    
    print("\nüì¶ VERIFICANDO ARQUIVO DO INSTALADOR")
    print("-" * 40)
    
    installer_file = Path("MedAI_Radiologia_Installer.py")
    if installer_file.exists():
        size = installer_file.stat().st_size
        print(f"‚úÖ Instalador encontrado: {installer_file}")
        print(f"üìè Tamanho: {size / 1024:.1f} KB")
    else:
        print(f"‚ùå Instalador n√£o encontrado: {installer_file}")
        return False
    
    print("\nüîç VERIFICANDO ESTRUTURA DO INSTALADOR")
    print("-" * 40)
    
    with open(installer_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    essential_components = [
        ("class MedAIWindowsInstaller", "Classe principal do instalador"),
        ("EMBEDDED_FILES_DATA", "Dados embarcados"),
        ("def create_gui_installer", "Interface gr√°fica"),
        ("def run_text_installer", "Modo texto fallback"),
        ("def install_application", "Processo de instala√ß√£o"),
        ("def create_shortcuts", "Cria√ß√£o de atalhos"),
        ("def register_application", "Registro no Windows"),
        ("import tkinter", "Interface gr√°fica"),
        ("import winreg", "Registro do Windows"),
        ("import base64", "Decodifica√ß√£o de arquivos")
    ]
    
    all_components_present = True
    for component, description in essential_components:
        if component in content:
            print(f"‚úÖ {description}: Presente")
        else:
            print(f"‚ùå {description}: AUSENTE")
            all_components_present = False
    
    print("\nüìÅ VERIFICANDO DADOS EMBARCADOS")
    print("-" * 40)
    
    if "EMBEDDED_FILES_DATA" in content:
        import re
        import base64
        import json
        
        match = re.search(r'EMBEDDED_FILES_DATA = "([^"]+)"', content)
        if match:
            try:
                embedded_data = match.group(1)
                decoded_data = base64.b64decode(embedded_data).decode()
                files_data = json.loads(decoded_data)
                
                print(f"‚úÖ Dados embarcados decodificados com sucesso")
                print(f"üìä Arquivos embarcados: {len(files_data)}")
                
                for file_path in files_data.keys():
                    print(f"   ‚Ä¢ {file_path}")
                    
            except Exception as e:
                print(f"‚ùå Erro ao decodificar dados embarcados: {e}")
                all_components_present = False
        else:
            print("‚ùå Dados embarcados n√£o encontrados")
            all_components_present = False
    
    print("\nü™ü VERIFICANDO COMPATIBILIDADE WINDOWS")
    print("-" * 40)
    
    windows_features = [
        ("os.name != 'nt'", "Verifica√ß√£o de sistema Windows"),
        ("winreg", "Acesso ao registro do Windows"),
        ("win32com.client", "Cria√ß√£o de atalhos"),
        ("C:/Program Files", "Diret√≥rio de instala√ß√£o padr√£o"),
        (".dcm", "Associa√ß√£o de arquivos DICOM")
    ]
    
    for feature, description in windows_features:
        if feature in content:
            print(f"‚úÖ {description}: Implementado")
        else:
            print(f"‚ö†Ô∏è  {description}: N√£o encontrado")
    
    print("\nüöÄ VERIFICANDO AUTONOMIA DO INSTALADOR")
    print("-" * 40)
    
    external_dependencies = [
        ("import nsis", "NSIS import"),
        ("makensis", "Comando NSIS"),
        ("docker", "Docker"),
        ("subprocess.call.*cmd", "Linha de comando obrigat√≥ria")
    ]
    
    autonomous = True
    for dep, description in external_dependencies:
        if dep.lower() in content.lower():
            print(f"‚ùå Depend√™ncia externa encontrada: {description}")
            autonomous = False
        else:
            print(f"‚úÖ N√£o depende de: {description}")
    
    print("\nüë• VERIFICANDO INTERFACE DO USU√ÅRIO")
    print("-" * 40)
    
    ui_features = [
        ("tkinter", "Interface gr√°fica"),
        ("messagebox", "Caixas de di√°logo"),
        ("ttk.Progressbar", "Barra de progresso"),
        ("run_text_installer", "Modo texto fallback"),
        ("Bem-vindo ao instalador", "Mensagem amig√°vel"),
        ("Instala√ß√£o conclu√≠da", "Feedback de sucesso")
    ]
    
    for feature, description in ui_features:
        if feature in content:
            print(f"‚úÖ {description}: Presente")
        else:
            print(f"‚ö†Ô∏è  {description}: N√£o encontrado")
    
    print("\n" + "=" * 70)
    print("üìä RESULTADO FINAL DOS TESTES")
    print("=" * 70)
    
    if all_components_present and autonomous:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Instalador Python aut√¥nomo est√° pronto")
        print("‚úÖ N√£o depende de NSIS ou programas externos")
        print("‚úÖ Interface gr√°fica amig√°vel para usu√°rios")
        print("‚úÖ Modo texto fallback dispon√≠vel")
        print("‚úÖ Instala√ß√£o autom√°tica sem etapas manuais")
        print("‚úÖ Adequado para usu√°rios sem conhecimento t√©cnico")
        print()
        print("üîß Para criar execut√°vel Windows:")
        print("   1. Execute em m√°quina Windows com Python")
        print("   2. pip install pyinstaller")
        print("   3. pyinstaller --onefile --windowed MedAI_Radiologia_Installer.py")
        print()
        print("üì¶ Resultado: MedAI_Radiologia_Installer.exe")
        print("   ‚Ä¢ Execut√°vel standalone")
        print("   ‚Ä¢ N√£o requer instala√ß√£o de Python")
        print("   ‚Ä¢ Interface gr√°fica nativa")
        print("   ‚Ä¢ Instala√ß√£o com 1 clique")
        
        return True
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
        print("‚ö†Ô∏è  Instalador requer corre√ß√µes")
        return False

if __name__ == "__main__":
    success = test_python_installer()
    sys.exit(0 if success else 1)
